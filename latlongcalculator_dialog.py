# -*- coding: utf-8 -*-
"""
/***************************************************************************
 LatlongcalculatorDialog
                                 A QGIS plugin
 Latitude Longitude calculator
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2021-05-22
        git sha              : $Format:%H$
        copyright            : (C) 2021 by chikubanda
        email                : chikubanda@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'latlongcalculator_dialog_base.ui'))


class LatlongcalculatorDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(LatlongcalculatorDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)

        #connect function to lat inputs that will be called on each change
        self.latDegreeSpinBox.valueChanged.connect(self.latDMStoDD)
        self.latMinSpinBox.valueChanged.connect(self.latDMStoDD)
        self.latSecondSpinBox.valueChanged.connect(self.latDMStoDD)
        self.cmbLatH.currentTextChanged.connect(self.latDMStoDD)

        # connect function to long inputs that will be called on each change
        self.longDegreeSpinBox.valueChanged.connect(self.longDMStoDD)
        self.longMinSpinBox.valueChanged.connect(self.longDMStoDD)
        self.longSecondSpinBox.valueChanged.connect(self.longDMStoDD)
        self.cmbLongH.currentTextChanged.connect(self.longDMStoDD)

        self.spdLatDD.editingFinished.connect(self.latDDtoDMS)

        self.spdLongDD.editingFinished.connect(self.longDDtoDMS)

    def latDMStoDD(self):
        iDeg = self.latDegreeSpinBox.value()
        iMin = self.latMinSpinBox.value()
        iSec = self.latSecondSpinBox.value()
        sHem = self.cmbLatH.currentText()

        dDD = float(iDeg) + iMin/60 + iSec/3600
        if sHem == "S":
            dDD = dDD * -1

        self.spdLatDD.setValue(dDD)

    def longDMStoDD(self):
        iDeg = self.longDegreeSpinBox.value()
        iMin = self.longMinSpinBox.value()
        iSec = self.longSecondSpinBox.value()
        sHem = self.cmbLongH.currentText()

        dDD = float(iDeg) + iMin/60 + iSec/3600
        if sHem == "W":
            dDD = dDD * -1

        self.spdLongDD.setValue(dDD)

    def latDDtoDMS(self):
        dDD = self.spdLatDD.value()

        iDeg = int(dDD)
        dMin = (dDD - iDeg) * 60
        iMin = int(dMin)
        dSec = (dMin - iMin) * 60

        self.latDegreeSpinBox.setValue(abs(iDeg))
        self.latMinSpinBox.setValue(abs(iMin))
        self.latSecondSpinBox.setValue(abs(dSec))

        if dDD < 0:
            self.cmbLatH.setCurrentText("S")
        else:
            self.cmbLatH.setCurrentText("N")

    def longDDtoDMS(self):
        dDD = self.spdLongDD.value()

        iDeg = int(dDD)
        dMin = (dDD - iDeg) * 60
        iMin = int(dMin)
        dSec = (dMin - iMin) * 60

        self.longDegreeSpinBox.setValue(abs(iDeg))
        self.longMinSpinBox.setValue(abs(iMin))
        self.longSecondSpinBox.setValue(abs(dSec))

        if dDD < 0:
            self.cmbLongH.setCurrentText("W")
        else:
            self.cmbLongH.setCurrentText("E")
